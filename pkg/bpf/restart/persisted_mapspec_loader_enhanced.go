//go:build enhanced
// +build enhanced

// Code generated by hack/gen_bpf_specs.go; DO NOT EDIT.

package restart

import (
	"fmt"

	"github.com/cilium/ebpf"

	dualengine "kmesh.net/kmesh/bpf/kmesh/bpf2go/dualengine"
	general "kmesh.net/kmesh/bpf/kmesh/bpf2go/general"
	kernelnative_enhanced "kmesh.net/kmesh/bpf/kmesh/bpf2go/kernelnative/enhanced"
	"kmesh.net/kmesh/daemon/options"
	helper "kmesh.net/kmesh/pkg/utils"
)

// Auto-generated: keeps in sync with //go:generate bpf2go lines.
func LoadCompileTimeSpecs(config *options.BpfConfig) (map[string]map[string]*ebpf.MapSpec, error) {
	specs := make(map[string]map[string]*ebpf.MapSpec)

	if config.KernelNativeEnabled() {
		// Symbol KmeshCgroupSock has both normal and compat variants.
		if helper.KernelVersionLowerThan5_13() {
			if coll, err := kernelnative_enhanced.LoadKmeshCgroupSockCompat(); err != nil {
				return nil, fmt.Errorf("load Compat KmeshCgroupSockCompat spec: %w", err)
			} else {
				specs["KmeshCgroupSockCompat"] = coll.Maps
			}
		} else {
			if coll, err := kernelnative_enhanced.LoadKmeshCgroupSock(); err != nil {
				return nil, fmt.Errorf("load KmeshCgroupSock spec: %w", err)
			} else {
				specs["KmeshCgroupSock"] = coll.Maps
			}
		}
		// Symbol KmeshSockops has both normal and compat variants.
		if helper.KernelVersionLowerThan5_13() {
			if coll, err := kernelnative_enhanced.LoadKmeshSockopsCompat(); err != nil {
				return nil, fmt.Errorf("load Compat KmeshSockopsCompat spec: %w", err)
			} else {
				specs["KmeshSockopsCompat"] = coll.Maps
			}
		} else {
			if coll, err := kernelnative_enhanced.LoadKmeshSockops(); err != nil {
				return nil, fmt.Errorf("load KmeshSockops spec: %w", err)
			} else {
				specs["KmeshSockops"] = coll.Maps
			}
		}
	} else if config.DualEngineEnabled() {
	}

	return specs, nil
}
